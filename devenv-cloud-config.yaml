#cloud-config

groups:
  - docker

system_info:
  default_user:
    groups: [docker]

apt:
  sources:
    docker.list:
      source: deb https://download.docker.com/linux/ubuntu $RELEASE stable
      keyid: 9DC858229FC7DD38854AE2D88D81803C0EBFCD88
    kubernetes.list:
      source: deb https://apt.kubernetes.io/ kubernetes-xenial main
      keyid: 7F92E05B31093BEF5A3C2D38FEEA9169307EA071

    # prebuilt-mpr should have "just" but doesn't seem to include arm :(
    # prebuilt.list:
    #   source: deb https://proget.makedeb.org prebuilt-mpr $RELEASE
    #   key: |
    #     -----BEGIN PGP PUBLIC KEY BLOCK-----
    #     Version: BCPG C# v1.8.1.0

    #     mQINBGJslcEBEACWT0Kphz3bmIO7s3BRW8Rw2m36YI0lDQmdkZy9F6Aa8+Ov9b6+
    #     44hAvPYfm0fjOiGxq264v9Av5/26vcrDYsPKupaQs6EjT0NjcZ2A47KLpeJGzbzt
    #     74KP+YyKm/oqW8Md8jb8GBRq0dnFoLOOA6bvHzP7TzANAKFIEZQ0m4GO/AI6Y9ap
    #     09Q+gZramLl9OCoKRhnmC7QiJO9PSLLvBJOWk3pORpMU5GK5df2RYgpC6d0laFe4
    #     KmmqcmuU7PgGAJ9C0Fy9i4WEEPdIrJ1Sg0PNnCloLGxFYg1he3gkF2GnTHAU05Ih
    #     yc1anMv4MDh5m3+Em3laEnR16lMPPi/veLvdyGJ61f1I8cih391afvHloN2J3Z+j
    #     0sZN7BZthIWkoqhd6DnZ+XGwJoM3lAsPaH3uHsNtquWIqEOO0UBndIOmrcVd5QyY
    #     1tAJBQHl9XDRirIfsbFxESevANTkc6DCe7VPLADK/nTqwVrrruOZAIXrEwnoWTFj
    #     xxl7lW+zswiVJWcpYIMQClCAgdq0g7bLs3UvPn4cUYYLTXRp+3LDps7hwmmoEYCD
    #     bsp4exVPS9Whzu2/6ojR4pwJcXdvXsnPsqcQGwwd/pNaJrjC/BmWbQBZaBspfj2X
    #     AtnhObFJkB49UWr+cFBIcoJAUEL16WyAf/o/1K8n1299Cc1QeUgBg1F41wARAQAB
    #     tBNjb250YWN0QG1ha2VkZWIub3JniQIlBBMBAgAPApsDBYJibJXBBYkAAAAAAAoJ
    #     EE/p8sQ9lCig3esQAIXM6ib4PJqKbAd5enhPBkAquZzLIsdaNg3f5dqan5BptIGM
    #     8EOS82Urlw7PACLlqf8lkM+0riU1SXGuEig+TFHHeYE9xYL9JguLnT+Iumfe/0YM
    #     y/26VNadQJv581eJUnRfOBdhUFsCwksLE28qq8SKDq9a8n719TgPngTZNaD0zCNB
    #     Tk90cwa7oRfUQza9IMn/7AvjvkpuwpsyZeSMj4RNL+1PaqgSgF1W94YWbXGO0e+g
    #     fyp+r8WH0rYEUbl51FxGw5vXV9hGKe2Xbo40TAIv//l//8LeluA3P4nzPnr1pGaq
    #     iqsIsVTfluC8OC0uEFTnsMCiyEUnP7LlCJc5dZeA+JfSuiwUI117cZ5TQr8uRY9L
    #     zHiwKJkkrg2XNxwjQ20BZASd4HOHW8NcD/MULUL3d+pQ+lzbqcHLqT69YJdfVnPa
    #     PEAsjHEauDbwgHyhy2pa2l43GcvecxlZTIXgKH+gGO+G2vC3vMFVcPLN0JWbHEkD
    #     Tyiht2rMcIaEGXqzigc/S9czkOzsUuFdlWlBslBxJ6/yJYj5kvpSyGRJIe0dKZMp
    #     yYDQQmO0+OuA75BUveDK9v9msA25NX8Ynus7tNh1LdlSnaJv6JYEIEhWDVBEkPmQ
    #     TKGNsT2a5xrLry8pS3XJYThitIc8G7/ngzVOejsZ94G4OmYuCQxK97Hf/aHu
    #     =Vi1D
    #     -----END PGP PUBLIC KEY BLOCK-----

package_update: true
package_upgrade: true

packages:
  - jq
  - curl
  - software-properties-common
  - apt-transport-https
  - ca-certificates
  - gnupg-agent
  - software-properties-common
  - docker-ce
  - docker-ce-cli
  - containerd.io
  - make
  - gcc
  - tzdata
  - kubectl

write_files:
- path: /etc/profile
  content: |
    export PATH=$PATH:$HOME/go/bin:/usr/local/go/bin
  append: true
- path: /etc/nsswitch.conf
  content: |
    hosts: files dns
- path: /usr/local/bin/pkgccaas
  permissions: '0755'
  content: |
    #!/usr/bin/env sh

    # TODO:
    # - download pkgccaas script from git instead of embedding it in yaml?
    # - same for pkgk8s, or combine the two?

    usage() {
        echo "Usage: pkgccaas -l <label> -a <address> [-m <META-INF directory>]"
    }

    error_exit() {
        echo "${1:-"Unknown Error"}" 1>&2
        exit 1
    }

    while getopts "hl:a:m:" opt; do
        case "$opt" in
            h)
                usage
                exit 0
                ;;
            l)
                label=${OPTARG}
                ;;
            m)
                metainf=${OPTARG}
                ;;
            a)
                address=${OPTARG}
                ;;
            *)
                usage
                exit 1
                ;;
        esac
    done
    shift $((OPTIND-1))

    if [ -z "$label" ] || [ -z "$address" ]; then
        usage
        exit 1
    fi

    metadir=$(basename "$metainf")
    if [ -n "$metainf" ]; then
        if [ "META-INF" != "$metadir" ]; then
            error_exit "Invalid chaincode META-INF directory $metadir: directory name must be 'META-INF'"
        elif [ ! -d "$metainf" ]; then
            error_exit "Cannot find directory $metadir"
        fi
    fi

    prefix=$(basename "$0")
    tempdir=$(mktemp -d -t "$prefix.XXXXXXXX") || error_exit "Error creating temporary directory"

    if [ -n "$DEBUG" ]; then
        echo "label = $label"
        echo "address = $address"
        echo "tempdir = $tempdir"
        echo "metainf = $metainf"
    fi

    mkdir -p "$tempdir/src"
    cat > "$tempdir/src/connection.json" << CONNECTION-EOF
    {
      "address": "${address}",
      "dial_timeout": "10s",
      "tls_required": false
    }
    CONNECTION-EOF

    if [ -n "$metainf" ]; then
        cp -a "$metainf" "$tempdir/src/"
    fi

    mkdir -p "$tempdir/pkg"
    cat << METADATA-EOF > "$tempdir/pkg/metadata.json"
    {
        "type": "ccaas",
        "label": "$label"
    }
    METADATA-EOF

    tar -C "$tempdir/src" -czf "$tempdir/pkg/code.tar.gz" .

    tar -C "$tempdir/pkg" -czf "$label.tgz" metadata.json code.tar.gz

    rm -Rf "$tempdir"
- path: /usr/local/bin/setup-fabric
  permissions: '0755'
  content: |
    #!/usr/bin/env sh

    # Hacky script to setup Fabric without needing to rely on published
    # binaries, since those don't exist for arm machines.
    #
    # TODO:
    # - download setup script from git instead of embedding it in yaml?
    # - add arguments for fabric version?
    # - make it less hacky?!

    mkdir -p "$HOME/go/src/github.com/hyperledger"
    git clone --depth 1 --branch release-2.4 https://github.com/hyperledger/fabric.git "$HOME/go/src/github.com/hyperledger/fabric"

    cd "$HOME/go/src/github.com/hyperledger/fabric"
    CGO_ENABLED=0 make orderer
    CGO_ENABLED=0 make tools
    CGO_ENABLED=0 make ccaasbuilder
    cd -

    mkdir -p "$HOME/go/bin"
    cp "$HOME/go/src/github.com/hyperledger/fabric/build/bin/"* "$HOME/go/bin"

    git clone --depth 1 --branch main https://github.com/hyperledger/fabric-samples.git "$HOME/fabric-samples"
    mkdir -p "$HOME/fabric-samples/config"
    cp "$HOME/go/src/github.com/hyperledger/fabric/sampleconfig/"*.yaml "$HOME/fabric-samples/config"

    mkdir -p "$HOME/fabric-builders"
    ln -s "$HOME/go/src/github.com/hyperledger/fabric/release/linux-arm64/builders/ccaas" "$HOME/fabric-builders/ccaas"

    mkdir -p "$HOME/fabric-builders/k8s/bin"
    wget -qO- https://github.com/hyperledger-labs/fabric-builder-k8s/releases/download/v0.8.0/fabric-builder-k8s-v0.8.0-$(go env GOOS)-$(go env GOARCH).tgz | tar -C "$HOME/fabric-builders/k8s/bin" -xzf -

    # TODO: just replace the external builders completely?
    yq e 'del(.vm.endpoint) | (.chaincode.externalBuilders[] | select(.name == "ccaas_builder") | .path) = ("${HOME}/fabric-builders/ccaas" | envsubst(ne)) | .chaincode.externalBuilders += { "name": "k8s_builder", "path": "${HOME}/fabric-builders/k8s" | envsubst(ne), "propagateEnvironment": [ "CORE_PEER_ID", "KUBECONFIG_PATH" ] }' -i "$HOME/fabric-samples/config/core.yaml"

    # TODO don't have permission to do this! Move to write-file or use a home bin directory?
    # wget -qO- https://raw.githubusercontent.com/hyperledgendary/package-k8s-chaincode-action/main/pkgk8scc.sh > /usr/local/bin/pkgk8scc && chmod 0755 /usr/local/bin/pkgk8scc

runcmd:
  - wget -P /tmp/ https://go.dev/dl/go1.18.7.linux-arm64.tar.gz
  - tar -C /usr/local -xzf /tmp/go1.18.7.linux-arm64.tar.gz
  - rm /tmp/go1.18.7.linux-arm64.tar.gz
  - GOPATH=/usr/local/go HOME=/root /usr/local/go/bin/go install sigs.k8s.io/kind@v0.16.0
  # Note: Cannot install later version of k9s this way due to https://github.com/derailed/k9s/issues/1484
  - GOPATH=/usr/local/go HOME=/root /usr/local/go/bin/go install github.com/derailed/k9s@v0.25.2
  - GOPATH=/usr/local/go HOME=/root /usr/local/go/bin/go install github.com/mikefarah/yq/v4@v4.28.1
  - curl --proto '=https' --tlsv1.2 -sSf https://just.systems/install.sh | bash -s -- --to /usr/local/bin
  - su -c "wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash" ubuntu
